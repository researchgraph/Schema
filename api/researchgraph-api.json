{
  "swagger": "2.0",
  "info": {
    "description": "This is the list of Research Graph APIs.",
    "version": "1.0.0",
    "title": "Research Graph",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "nnambiar@swin.edu.au"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "researchgraph.cloud",
  "basePath": "/api",
  
  "schemes": [
    "https",
    "http"
  ],
  "tags": [
    {
      "name": "Open Source LLMs",
      "description": "Open source LLM models running on Ollama",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://ollama.com/"
      }
    },
    {
      "name": "OpenAI",
      "description": "Access to OpenAI API",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "https://platform.openai.com/docs/api-reference/introduction"
      }
    }
  ],
  "paths": {
    "/generate": {
      "post": {
        "tags": [
          "Open Source LLMs"
        ],
        "summary": "Generate a response for the prompt using the provided model",
        "description": "",
        "operationId": "generateResponse",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Ollama Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ollama"
            }
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/ollama/tags": {
      "get": {
        "tags": [
          "Open Source LLMs"
        ],
        "summary": "List the available models",
        "description": "",
        "operationId": "listModels",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/gpt": {
      "post": {
        "tags": [
          "OpenAI"
        ],
        "summary": "Generate a chat completion",
        "description": "Sends a prompt to OpenAI's language model and returns a response.",
        "operationId": "createChatCompletion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "GPT Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChatCompletionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with AI-generated message.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier for the completion."
                    },
                    "object": {
                      "type": "string",
                      "example": "chat.completion"
                    },
                    "created": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Unix timestamp of completion creation."
                    },
                    "model": {
                      "type": "string",
                      "description": "Model used for completion."
                    },
                    "choices": {
                      "type": "array",
                      "description": "List of generated messages.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "integer",
                            "description": "Choice index."
                          },
                          "message": {
                            "type": "object",
                            "properties": {
                              "role": {
                                "type": "string",
                                "description": "Role of the sender (always 'assistant').",
                                "example": "assistant"
                              },
                              "content": {
                                "type": "string",
                                "description": "The generated response.",
                                "example": "I'm doing great! How can I help you today?"
                              }
                            }
                          },
                          "finish_reason": {
                            "type": "string",
                            "description": "Reason completion stopped.",
                            "example": "stop"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Unauthorized (missing or invalid API key)."
          },
          "429": {
            "description": "Rate limit exceeded."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },

    "/researchers": {
      "get": {
        "tags": [
          "RGF API"
        ],
        "summary": "Search for researchers by name",
        "description": "Searches the knowledge graph for researchers whose names contain the provided search term. Returns up to 3 researchers ordered by publication and funding counts.",
        "operationId": "searchResearchers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "Name or partial name to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with researcher information",
            "schema": {
              "$ref": "#/definitions/ResearcherResponse"
            }
          },
          "400": {
            "description": "Missing name parameter",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
  }
  
  },
  "definitions": {
    "ollama": {
      "type": "object",
      "required": [
        "model",
        "prompt"
      ],
      "properties": {
        "model": {
          "type": "string",
          "example": "llama3.1:latest"
        },
        "prompt": {
          "type": "string",
          "example": "Hello, how are you?"
        },
        "stream": {
          "type": "boolean",
          "example": false
        }
        }
      },
    "ChatCompletionRequest": {
        "type": "object",
        "required": ["model", "messages"],
        "properties": {
          "model": {
            "type": "string",
            "description": "ID of the model to use (e.g., gpt-4, gpt-3.5-turbo)."
          },
          "messages": {
            "type": "array",
            "description": "List of messages in the conversation.",
            "items": {
              "$ref": "#/definitions/ChatMessage"
            }
          },
          "temperature": {
            "type": "number",
            "description": "Sampling temperature, between 0 and 2.",
            "default": 1.0
          },
          "top_p": {
            "type": "number",
            "description": "Nucleus sampling, between 0 and 1.",
            "default": 1.0
          },
          "n": {
            "type": "integer",
            "description": "Number of completions to generate.",
            "default": 1
          },
          "stream": {
            "type": "boolean",
            "description": "Whether to stream back partial progress.",
            "default": false
          },
          "stop": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Up to 4 sequences where the API will stop generating further tokens."
          },
          "max_tokens": {
            "type": "integer",
            "description": "Maximum number of tokens to generate."
          },
          "presence_penalty": {
            "type": "number",
            "description": "Penalty for new tokens based on their presence in the text.",
            "default": 0
          },
          "frequency_penalty": {
            "type": "number",
            "description": "Penalty for new tokens based on their frequency in the text.",
            "default": 0
          },
          "logit_bias": {
            "type": "object",
            "description": "Modify the likelihood of specific tokens appearing in the completion.",
            "additionalProperties": {
              "type": "number"
            }
          },
          "user": {
            "type": "string",
            "description": "An optional user identifier for tracking purposes."
          }
        }
      },
      "ChatMessage": {
        "type": "object",
        "required": ["role", "content"],
        "properties": {
          "role": {
            "type": "string",
            "enum": ["system", "user", "assistant"],
            "description": "Role of the message sender."
          },
          "content": {
            "type": "string",
            "description": "Content of the message."
          }
        }
      },
      "ChatCompletionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the completion."
          },
          "object": {
            "type": "string",
            "enum": ["chat.completion"]
          },
          "created": {
            "type": "integer",
            "description": "Timestamp of creation."
          },
          "model": {
            "type": "string",
            "description": "Model used for the completion."
          },
          "choices": {
            "type": "array",
            "description": "List of generated choices.",
            "items": {
              "$ref": "#/definitions/ChatCompletionChoice"
            }
          },
          "usage": {
            "$ref": "#/definitions/Usage"
          }
        }
      },
      "ChatCompletionChoice": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "description": "Index of the choice."
          },
          "message": {
            "$ref": "#/definitions/ChatMessage"
          },
          "finish_reason": {
            "type": "string",
            "description": "Reason for completion finishing."
          }
        }
      },
      "Usage": {
        "type": "object",
        "properties": {
          "prompt_tokens": {
            "type": "integer",
            "description": "Number of tokens in the prompt."
          },
          "completion_tokens": {
            "type": "integer",
            "description": "Number of tokens in the completion."
          },
          "total_tokens": {
            "type": "integer",
            "description": "Total number of tokens used."
          }
        }
      },
      "Researcher": {
      "type": "object",
      "properties": {
        "orcid": {
          "type": "string",
          "description": "ORCID identifier for the researcher",
          "example": "0000-0002-1825-0097"
        },
        "researcher_name": {
          "type": "string",
          "description": "Full name of the researcher",
          "example": "Alice Smith"
        },
        "publication_count": {
          "type": "integer",
          "description": "Number of publications associated with the researcher",
          "example": 42
        },
        "funding_count": {
          "type": "integer",
          "description": "Number of grants/funding sources associated with the researcher",
          "example": 5
        },
        "affiliations": {
          "type": "array",
          "description": "List of organizations the researcher is affiliated with",
          "items": {
            "type": "string"
          },
          "example": [
            "Swinburne University of Technology",
            "Data Science Institute"
          ]
        }
      }
    },
    "ResearcherResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "Response status",
          "example": "success"
        },
        "count": {
          "type": "integer",
          "description": "Number of researchers returned",
          "example": 3
        },
        "researchers": {
          "type": "array",
          "description": "List of researcher information",
          "items": {
            "$ref": "#/definitions/Researcher"
          }
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "description": "Error message",
          "example": "Name parameter is required"
        },
        "status": {
          "type": "integer",
          "description": "HTTP status code",
          "example": 400
        }
      }
    }
  }
}
